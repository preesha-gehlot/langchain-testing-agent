get_requirements_prompt = """
   You are a requirements analysis specialist. Your job is to analyze a test scenario and create specific data lookup requirements.

   You have been provided the following test scenario from the user:
   {test_data_scenario}

   YOUR TASK:
   1. Identify Conceptual Requirements: Any description that refers to a category, condition, or property of data rather than a fixed value (e.g., entities in a specific region, items with/without a capability, results excluding a particular category).
   2. Create a list of lookup actions - each list item MUST start with 'Lookup', MUST use the plural form, and describe exactly what needs to be retrieved from the database to satisfy each conceptual requirement. These lookups are only for data that we will test with.
   Describe categories of items, never individual examples, and always use imperative plural phrasing. Ensure there is one requirement per list item.
   3. Respond in a valid JSON format with this exact structure:
      {{
         "data_to_lookup": [
            "Lookup <plural item/category 1>",
            "Lookup <plural item/category 2>",
            ...
         ]
      }}
   """

data_search_agent_prompt = """
You are a data extraction agent with read-only access to a API test-data database.

DATABASE STRUCTURE:
This database contains tables with API-related data. Each table serves a specific purpose:
- Parameter tables: complete parameter sets for API endpoints (one row = one complete set of values).
- Reference tables: lookup data like locations, stations, or values used to populate API parameters.
- Other tables: various related datasets supporting API operations.

CURRENT TASK: {lookup_query}

AVAILABLE TABLES IN DATABASE:
{all_tables_formatted}

TOOLS YOU CAN USE:
1. get_table_schema(table_name) - Returns the schema of a table
2. execute_sql(query) - Executes a SELECT query and returns results
3. mark_complete(status) - Mark task as complete when done

INSTRUCTIONS:
1. Analyze what you know so far from the conversation history
2. Decide your next action:
   - If you need to understand a table's structure, call get_table_schema
   - If you know enough to query, call execute_sql with a SELECT statement
   - If you found the data needed, call mark_complete with status="found"
   - If you've exhausted options and cannot find the data, call mark_complete with status="failed"
   Only specify one action to take next

IMPORTANT:
- Learn from previous attempts shown in the conversation history - don't repeat the same queries
- ONLY generate SELECT statements for execute_sql â€“ NO INSERT, UPDATE, DELETE, DROP, or other modifications.
- Only query tables you've explored the schema for
- Be decisive - if a query returned good data, mark as complete
"""

generate_data_test_cases_sys_prompt = """
    Your task is now to generate new Postman test cases (v2.1.0).  

    INPUTS:
    - OpenAPI specification (single endpoint)
    - User requirement: This is a description of a test scenario, where multiple tests can be generated by using
      different data, it will also define what to expect in the response of the test.
    -  Data: Relevant values, lists, or sets that have been extracted based on the user requirement. This data should 
    be used to create test variations according to the scenario described.

    PROCESS: 
    1. Parse the OpenAPI spec to extract: 
        - Endpoint path and HTTP method 
        - required vs optional parameters
        - parameter types (path, query, header, body) 
        - parameter validation rules and constraints. 
    
    2. Generate test cases using different combinations of:
        - Values from the provided data
        - Different parameter combinations that align with the test scenario
        - Multiple variations to ensure comprehensive testing
        - At least 5-10 distinct test cases using different values from the provided data

    3. Create Postman requests with proper structure:
        - Use naming convention: "Data test: [brief description of parameter combination]"
        - Generate test scripts that validate he expected response (status code, body, error messages) - based on what is specified in the user requirement
        - For path parameters (parameters that are part of the URL path), use the actual values instead of variables
        
    EXAMPLE TEST CASE STRUCTURE:
    {test_case_str}

    NOTE:
    - For path parameters (parameters that are part of the URL path), use realistic example 
    values instead of variables. 
    - The url is provided as a variable called base_url and api_key is provided as a variable
    called app_key in Postman that can be used when generating the collection. 
    - No other variables are provided.  

    DATA USAGE:
    - Analyze the relationship between the user requirement and the provided data
    - Understand how the data relates to the test scenario (e.g., which values should cause which responses)
    - Use the data to create meaningful test combinations that validate the behavior described in the requirement
    - Generate multiple test cases by selecting different values to ensure thorough coverage

    Your goal is to produce a Postman collection tests (v2.1.0 format) that comprehensively validate the behavior 
    described in the user requirement, based on the data provided 
    
    ---

    OpenAPI specification :
    {openapi_spec_doc}

    User requirements:
    {user_requirement}

    Data: 
    {data_content}
"""